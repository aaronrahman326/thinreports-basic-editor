# coding: utf-8

$LOAD_PATH.unshift(File.expand_path(File.dirname(__FILE__)))

module ThinReportsEditor

  # @param [Hash] options
  #   @option options [Boolean] :preview (false)
  #   @option options [String?] :output (nil)
  def run_command(options = {}, &block)
    builder = CommandBuilder.new
    if block.arity < 1
      res = builder.instance_eval(&block)
      builder.add(res) if res.is_a?(::String)
    else
      block[builder]
    end

    # Not run with show command
    if options[:preview] || ENV['preview'] == 'true'
      puts '- Commmand ' + ('-' * 80)
      puts builder.inspect
      puts '-----------' + ('-' * 80)
    # Run!
    else
      # Redirect STDERR to specified file
      if options[:output]
        if RUBY_VERSION < '1.9' && Rake.application.windows?
          begin
            require 'win32/open3'
          rescue LoadError
            raise e, 'You need "win32-open3", ' +
                     'Please run this command `gem install win32-open3`.'
          end
        else
          require 'open3'
        end

        Open3.popen3(builder.to_s) do |stdin, stdout, stderr|
          File.open(options[:output], 'w') do |f|
            f.puts stderr.read
          end
        end
      # Normal
      else
        system(builder.to_s)
      end
    end
  end

  class CommandBuilder
    ROOT = File.join('..')
    LIB_ROOT = File.join(ROOT, 'lib')
    TOOLS_ROOT = File.join(ROOT, 'dev', 'tools')
    CLOSURE_COMPILER = File.join(TOOLS_ROOT, 'closure-compiler-latest', 'compiler.jar')
    CLOSURE_STYLESHEETS = File.join(TOOLS_ROOT, 'closure-stylesheets-latest', 'stylesheets.jar')
    TEMPLATE_COMPILER = File.join(TOOLS_ROOT, 'template-compiler-latest', 'SoyToJsSrcCompiler.jar')

    attr_reader :commands

    def initialize
      @commands = []
    end

    def add(cmd)
      @commands << cmd
    end

    def to_s
      @commands.join(' ')
    end

    def inspect
      unless @commands.size.zero?
        ' ' + @commands.join($/ + ' ' * 3)
      else
        '  Nothing  '
      end
    end

    def path_from_root(*paths)
      options = paths.last.is_a?(::Hash) ? paths.pop : {}
      path = File.join(([ROOT] + paths).compact)
      quote_path(path, options)
    end

    def path_from_core(*paths)
      path_from_root(*paths.unshift('core'))
    end

    def path_from_assets(*paths)
      path_from_root(*paths.unshift('assets'))
    end

    def path_from_lib(*paths)
      path_from_root(*paths.unshift('lib'))
    end

    def closure_library_for(*paths)
      path_from_lib(*paths.unshift('closure-library'))
    end

    def closure_templates_for(*paths)
      path_from_lib(*paths.unshift('closure-templates'))
    end

    def closure_library_bin_for(*paths)
      closure_library_for(*(%w( closure bin ) + paths))
    end

    def closure_calcdeps_py
      closure_library_bin_for('calcdeps.py')
    end

    def closure_builder_py
      closure_library_bin_for('build', 'closurebuilder.py')
    end

    def closure_depswriter_py
      closure_library_bin_for('build', 'depswriter.py')
    end

    def closure_templates_for(*paths)
      path_from_lib('closure-templates')
    end

    def closure_compiler_jar(options = {})
      quote_path(CLOSURE_COMPILER, options)
    end

    def closure_stylesheets_jar(options = {})
      quote_path(CLOSURE_STYLESHEETS, options)
    end

    def template_compiler_jar(options = {})
      quote_path(TEMPLATE_COMPILER, options)
    end

    def css_config_yml
      path_from_assets('config.yml')
    end

    def css_file_path(filename)
      path_from_assets(filename)
    end

    def quote_path_if_include_blank(path, options = {})
      q = options[:escape] ? '\"' : '"'
      path.include?(' ') ? q + path + q : path
    end
    alias :quote_path :quote_path_if_include_blank
  end

end

# Load tasks
Dir.glob('tasks/*.rake').each do |r|
  Rake.application.add_import r
end
